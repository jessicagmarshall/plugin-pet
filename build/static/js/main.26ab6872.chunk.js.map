{"version":3,"sources":["assets/angry_cat.jpeg","utils.js","components/BaseExtension.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","chrome","alarms","onAlarm","addListener","browserAction","setBadgeText","text","notifications","create","type","iconUrl","title","message","priority","onButtonClicked","storage","sync","get","item","delayInMinutes","minutes","BaseExtension","props","state","timesIgnored","result","undefined","set","this","setState","bind","onClosed","incrementTimesIgnored","src","angry_cat","onClick","console","log","parseFloat","turnCatOn","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,wC,6LCkB3CC,OAAOC,OAAOC,QAAQC,aAAY,WAChCH,OAAOI,cAAcC,aAAa,CAACC,KAAM,KACzCN,OAAOO,cAAcC,OAAO,CACxBC,KAAU,QACVC,QAAU,iBACVC,MAAU,2BACVC,QAAU,cACVC,SAAU,OAIhBb,OAAOO,cAAcO,gBAAgBX,aAAY,WAC/CH,OAAOe,QAAQC,KAAKC,IAAI,CAAC,YAAY,SAASC,GAC5ClB,OAAOI,cAAcC,aAAa,CAACC,KAAM,OACzCN,OAAOC,OAAOO,OAAO,CAACW,eAAgBD,EAAKE,gB,oBCyBhCC,E,kDAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTC,aAAc,GAHD,E,gEASjBxB,OAAOe,QAAQC,KAAKC,IAAI,CAAC,gBAAiB,SAASQ,QACrBC,IAAxBD,EAAOD,aACTxB,OAAOe,QAAQC,KAAKW,IAAI,CAAC,aAAgB,GAAI,SAASF,GACpDG,KAAKC,SAAS,CAAC,aAAgB,KAC/BC,KAAKF,OAEPA,KAAKC,SAAS,CAAC,aAAgBJ,EAAOD,gBAExCM,KAAKF,OAGP5B,OAAOO,cAAcwB,SAAS5B,YAAY,WACxCyB,KAAKI,yBACLF,KAAKF,S,8CAIPA,KAAKC,SAAS,CAAEL,aAAcI,KAAKL,MAAMC,aAAe,M,2CAIvDxB,OAAOe,QAAQC,KAAKW,IAAI,CAAC,aAAgBC,KAAKL,MAAMC,cAAe,SAASC,KAC1EK,KAAKF,S,+BAIN,OACI,6BACE,yBACEK,IAAKC,IACLC,QAAS,kBD7ChB,WACLC,QAAQC,IAAI,WACZ,IAAIjB,EAAUkB,WAAW,OACzBtC,OAAOI,cAAcC,aAAa,CAACC,KAAM,SACzCN,OAAOC,OAAOO,OAAO,CAACW,eAAgBC,IACtCpB,OAAOe,QAAQC,KAAKW,IAAI,CAACP,QAASA,ICwCPmB,MAEjB,6BACE,+DAAiCX,KAAKL,MAAMC,aAA5C,YAAwF,IAA5BI,KAAKL,MAAMC,aAAqB,OAAS,gB,GA3CvFgB,aCKbC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMhD,c","file":"static/js/main.26ab6872.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/angry_cat.fd589234.jpeg\";","/*global chrome*/\n\nexport function turnCatOn() {\n  console.log('eep oop');\n  let minutes = parseFloat('0.1');\n  chrome.browserAction.setBadgeText({text: 'PURR'});\n  chrome.alarms.create({delayInMinutes: minutes});\n  chrome.storage.sync.set({minutes: minutes});\n//  window.close();\n}\n\n\nexport function turnCatOff() {\n  chrome.browserAction.setBadgeText({text: ''});\n  chrome.alarms.clearAll();\n//  window.close();\n}\n\nchrome.alarms.onAlarm.addListener(function() {\n  chrome.browserAction.setBadgeText({text: ''});\n  chrome.notifications.create({\n      type:     'basic',\n      iconUrl:  'angry_cat.jpeg',\n      title:    'Your cat wants attention',\n      message:  'PET ME NOW!',\n      priority: 0});\n});\n\n// user pressed a button in the notification\nchrome.notifications.onButtonClicked.addListener(function() {\n  chrome.storage.sync.get(['minutes'], function(item) {\n    chrome.browserAction.setBadgeText({text: 'ON'});\n    chrome.alarms.create({delayInMinutes: item.minutes});\n  });\n});","/*global chrome*/\n\nimport React, { Component } from 'react';\n\nimport { turnCatOn, turnCatOff } from \"../utils\";\nimport angry_cat from '../assets/angry_cat.jpeg';\n\nclass BaseExtension extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n        timesIgnored: 0\n    }\n  }\n\n  componentDidMount() {\n    // persist state\n    chrome.storage.sync.get(['timesIgnored'], function(result) {\n      if (result.timesIgnored === undefined) {\n        chrome.storage.sync.set({'timesIgnored': 0}, function(result) {\n          this.setState({'timesIgnored': 0})\n        }.bind(this));\n      } else {\n        this.setState({'timesIgnored': result.timesIgnored})\n      }\n    }.bind(this));\n\n    // the notification was closed, either by the system or by user action\n    chrome.notifications.onClosed.addListener(function() {\n      this.incrementTimesIgnored()\n    }.bind(this));\n  }\n\n  incrementTimesIgnored() {\n    this.setState({ timesIgnored: this.state.timesIgnored + 1 })\n  }\n\n  componentDidUpdate() {\n     chrome.storage.sync.set({'timesIgnored': this.state.timesIgnored}, function(result) {\n     }.bind(this));\n  }\n\n  render() {\n      return (\n          <div>\n            <img\n              src={angry_cat}\n              onClick={() => turnCatOn()}\n            />\n            <div>\n              <p>{`You have ignored your cat ${this.state.timesIgnored} ${this.state.timesIgnored === 1 ? 'time' : 'times'}`}</p>\n            </div>\n          </div>\n      )\n   }\n}\n\nexport default BaseExtension;","import React from 'react';\nimport './App.css';\nimport BaseExtension from './components/BaseExtension'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BaseExtension />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}