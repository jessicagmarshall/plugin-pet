{"version":3,"sources":["utils.js","components/BaseExtension.js","App.js","serviceWorker.js","index.js","assets/angry_cat.jpeg","assets/sleeping_cat.jpg"],"names":["turnCatOn","minutes","parseFloat","chrome","browserAction","setBadgeText","text","alarms","create","delayInMinutes","storage","sync","set","onAlarm","addListener","notifications","type","iconUrl","title","message","priority","default_values","BaseExtension","props","state","timesIgnored","paused","this","getStorageValue","onClosed","incrementTimesIgnored","bind","key","get","result","console","log","undefined","setState","prevState","Object","keys","setStorageValue","clearAll","class","style","height","width","src","sleeping_cat","angry_cat","onClick","togglePause","alt","color","display","justifyContent","alignItems","paddingBottom","PlayCircleOutlined","fontSize","PauseCircleOutlined","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.dff6459d.chunk.js","sourcesContent":["/*global chrome*/\n\nexport function turnCatOn() {\n  let minutes = parseFloat('0.1');\n  chrome.browserAction.setBadgeText({text: 'PURR'});\n  chrome.alarms.create({delayInMinutes: minutes});\n  chrome.storage.sync.set({minutes: minutes});\n//  window.close();\n}\n\n\nexport function turnCatOff() {\n  chrome.browserAction.setBadgeText({text: ''});\n  chrome.alarms.clearAll();\n//  window.close();\n}\n\nchrome.alarms.onAlarm.addListener(function() {\n//  chrome.browserAction.setBadgeText({text: ''});\n  chrome.notifications.create({\n      type:     'basic',\n      iconUrl:  'angry_cat.jpeg',\n      title:    'Your cat wants attention',\n      message:  'PET ME NOW!',\n      priority: 0});\n  turnCatOn()\n});\n\n// user pressed a button in the notification\n//chrome.notifications.onButtonClicked.addListener(function() {\n//  chrome.storage.sync.get(['minutes'], function(item) {\n//    chrome.browserAction.setBadgeText({text: 'ON'});\n//    chrome.alarms.create({delayInMinutes: item.minutes});\n//  });\n//});","/*global chrome*/\n\nimport React, { Component } from 'react';\nimport { PauseCircleOutlined, PlayCircleOutlined } from '@ant-design/icons';\n\nimport { turnCatOn, turnCatOff } from \"../utils\";\nimport angry_cat from '../assets/angry_cat.jpeg';\nimport sleeping_cat from '../assets/sleeping_cat.jpg';\n\nvar default_values = {\n  'timesIgnored': 0,\n  'paused': true\n}\n\nclass BaseExtension extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        timesIgnored: 0,\n        paused: true\n    }\n  }\n\n  componentDidMount() {\n    // persist state\n    this.getStorageValue('timesIgnored');\n    this.getStorageValue('paused');\n\n    // the notification was closed, either by the system or by user action\n    chrome.notifications.onClosed.addListener(function() {\n      this.incrementTimesIgnored();\n    }.bind(this));\n  }\n\n  getStorageValue(key) {\n    chrome.storage.sync.get([key], function(result) {\n      console.log(key, result[key], 'get')\n      if (result[key] === undefined) {\n        chrome.storage.sync.set({key: default_values[key]}, function(result) {\n        }.bind(this));\n      } else {\n//        console.log(key, result[key]);\n        this.setState({[key]: result[key]}, () => {\n//          console.log(this.state)\n        });\n      }\n    }.bind(this));\n  }\n\n  setStorageValue(key) {\n     console.log(key, this.state[key], 'set');\n     chrome.storage.sync.set({key: this.state[key]}, function() {\n//       console.log(this.state, key)\n     });\n  }\n\n  incrementTimesIgnored() {\n    this.setState({ timesIgnored: this.state.timesIgnored + 1 });\n  }\n\n  componentDidUpdate(prevState) {\n    for (const key in Object.keys(this.state)) {\n      if (prevState[key] !== this.state[key]) {\n        this.setStorageValue(key)\n      }\n    }\n  }\n\n  togglePause() {\n    this.setState({ paused: !this.state.paused }, () => {\n      if (!this.state.paused) {\n        turnCatOn()\n      } else {\n        turnCatOff()\n      }\n    });\n  }\n\n  render() {\n      return (\n          <div class=\"container\">\n            <div>\n              <img\n                style={{ height: '250px', width: '250px' }}\n                src={!this.state.paused ? angry_cat : sleeping_cat}\n                onClick={() => this.togglePause()}\n                alt='angry_cat'\n              />\n            </div>\n            <div style={{ color: 'black', display: 'flex', justifyContent: 'space-around' }}>\n              <div>\n                <p>{`You have ignored your cat ${this.state.timesIgnored} ${this.state.timesIgnored === 1 ? 'time' : 'times'}.`}</p>\n              </div>\n              <div style={{ display: 'flex', alignItems: 'center', paddingBottom: '2px' }}>\n                {!this.state.paused ?\n                  <PauseCircleOutlined\n                    style={{ fontSize: 20, display: 'flex', alignItems: 'center' }}\n                    onClick={() => this.togglePause()}\n                  /> :\n                  <PlayCircleOutlined\n                    style={{ fontSize: 20, display: 'flex', alignItems: 'center' }}\n                    onClick={() => this.togglePause()}\n                  />\n                 }\n              </div>\n            </div>\n            <div style={{ color: 'black' }}>\n              {this.state.paused ? `Click to wake up your cat.` : `Click to put your cat to sleep.`}\n            </div>\n          </div>\n      )\n   }\n}\n\nexport default BaseExtension;\n","import React from 'react';\nimport './App.css';\nimport BaseExtension from './components/BaseExtension'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BaseExtension />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/angry_cat.fd589234.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/sleeping_cat.6ba9c7e8.jpg\";"],"sourceRoot":""}